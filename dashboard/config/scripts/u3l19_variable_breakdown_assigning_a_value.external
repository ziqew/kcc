name 'U3L19 - variable breakdown - Assigning a value'
title 'U3L19 - variable breakdown - Assigning a value'
description 'description here'

markdown <<MARKDOWN
# Variable Breakdown

## Assigning a value

Now that you’ve created the variable you can store a value inside it. You do that like this:

<table width=800 border=1>
<tr>
<td width=66%>
<pre>
var foo;
foo = 7;
</pre>
The second line of code says: take the value 7 and put it into the variable foo.
</td>
<td>
<img src="https://code.org/educate/csp/images/codeStudio/U3L19-declareAndAssignfoo.png">

</td>
</tr>
</table>

You can store other types of data inside variables besides numbers. 

This also works for example:

<table width=800 border=1>
<tr>
<td width=66%>
<pre>
foo = “Hello, there”
</pre>
</td>
<td>
<img src="https://code.org/educate/csp/images/codeStudio/U3L19-assignVarHelloThere.png">
</td>
</tr>
</table>

In fact, it’s so common to want to declare a variable and assign it a value right away that most programming languages let you do it all on one line like this:

<pre>
var foo = 7;
</pre>

But make no mistake - this simple line is really making the computer do two things - allocate memory for a variable called foo, and assigning it the value 7. In fact, underneath the hood, JavaScript actually breaks this into two lines...
<pre>
var foo;
foo = 7;
</pre>
...before it runs the code.  

And while this is convenient it leads to another common mistake...

<a class="btn btn-large btn-primary next-stage submitButton">Continue to see the common mistake...</a>





MARKDOWN